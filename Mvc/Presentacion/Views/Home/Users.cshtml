@using Ipstatuschecker.Dto
@using Ipstatuschecker.Dto.Response
@model List<GetAllViweModelDto>

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <style>
       body {
        font-family: Arial, sans-serif;
        text-align: center;
        margin-top: 20px;
        color: #333;
        }

        .container {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: auto;
        max-width: 98%;
        border-radius: 10px;
        padding: 20px;
        }

        table {
        width: 130%;
        border-collapse: collapse;
        margin: 20px 0;
        box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
        }

        th,
        td {
        padding: 20px;
        border: 1px solid #ddd;
        text-align: center;
        }

        th {
        background-color: #4CAF50;
        color: #ffffff;
        font-size: 1.2em;
        }

        tr:nth-child(even) {
        background-color: #f9f9f9;
        }

        a {
        color: #7810bdf1;
        text-decoration: none;
        font-weight: bold;
        font-size: 1.1em;
        }

        a:hover {
        text-decoration: underline;
        color: #7810bdf1;
        }

        .breaktime {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: space-between;
        gap: 30px;
        width: 100%;
        }

        .start-wrapper {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: auto;
        width: 100%;
        margin: 15px 0;
        }

        .box-list {
        padding-top: 5px;
        display: flex;
        align-content: center;
        justify-content: center;
        overflow-y: scroll;
        max-height: 130px;
        width: 100%;
        }

        select {
        padding: 10px;
        border-radius: 6px;
        border: 1px solid #ccc;
        width: 100%;
        font-size: 1em;
        }

        p {
        cursor: pointer;
        font-weight: bold;
        font-size: 1.1em;
        }

        .time-in {
        color: #4CAF50;
        }

        .time-in:hover {
        color: #388e3c;
        }

        .time-out {
        color: #FF8C00;
        }

        .time-out:hover {
        color: #e67e00;
        }

        .break-start {
        color: #FF3333;
        }

        .break-start:hover {
        color: #cc0000;
        }

        .break-end {
        color: #FFD700;
        }

        .break-end:hover {
        color: #e6c300;
        }

        .action-button {
        padding: 15px 25px;
        margin-top: 20px;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 7px;
        cursor: pointer;
        transition: background-color 0.3s;
        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
        font-size: 1.1em;
        }

        .action-button:hover {
        background-color: #388e3c;
        }
    </style>
</head>

<body>
    <div class="container">
        <table>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Time In</th>
                    <th>Time Out</th>
                    <th>Break Time</th>
                </tr>
            </thead>
            <tbody   id="log-table-body">
                <!-- The table body will be dynamically populated by JavaScript -->
            </tbody>
        </table>
    </div>

    <script>
        // Step 1: Serialize the model data to JavaScript
        const logs = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));

        // Step 2: Render the data into the HTML using JavaScript
        document.addEventListener("DOMContentLoaded", () => {
            renderLogs(logs);
        });

        function renderLogs(logs) {
            const logTableBody = document.getElementById("log-table-body");
            logTableBody.innerHTML = ''; // Clear the table body

            logs.forEach(log => {
                const row = document.createElement('tr');
                row.dataset.logId = log.Id;

                row.innerHTML = `
                    <td><a href="#" onclick="event.preventDefault(); goToPage('${log.Id}')">${log.Name}</a></td>
                    <td>
                        <div id="test" class="start-wrapper">
                            <p class="time-in" onclick="filterTimesByTimeIn('${log.Id}')">Time In TESTING</p>
                            <div class="box-list">
                                <select class="ol-tag time-in-select" id="online-time-${log.Id}" onchange="filterTimesByTimeIn('${log.Id}')">
                                    ${log.PingLogDtoResponse?.OnlieTime ? log.PingLogDtoResponse.OnlieTime.map(time => `<option value="${time}">${new Date(time).toLocaleString()}</option>`).join('') : ''}
                                </select>
                            </div>
                        </div>
                    </td>
                    <td>
                        <div class="start-wrapper">
                            <p class="time-out">Offline Time</p>
                            <div class="box-list">
                                <select class="ol-tag" id="break-offline-time-${log.Id}">
                                    ${log.PingLogDtoResponse?.OflineTime ? log.PingLogDtoResponse.OflineTime.map(time => `<option value="${time}">${new Date(time).toLocaleString()}</option>`).join('') : ''}
                                </select>
                            </div>
                        </div>
                    </td>
                    <td>
                        <div class="breaktime">
                            <div class="start-wrapper">
                                <p class="break-start">Start Time</p>
                                <div class="box-list">
                                    <select class='ol-tag' id='start-time-${log.Id}'>
                                        ${log.WorkSchedules?.StartTime ? log.WorkSchedules.StartTime.map(time => `<option value="${time}">${new Date(time).toLocaleString()}</option>`).join('') : ''}
                                    </select>
                                </div>
                            </div>

                            <div class="start-wrapper">
                                <p class="break-end">End Time</p>
                                <div class="box-list">
                                    <select class='ol-tag' id="end-time-${log.Id}">
                                        ${log.WorkSchedules?.EndTime ? log.WorkSchedules.EndTime.map(time => `<option value="${time}">${new Date(time).toLocaleString()}</option>`).join('') : ''}
                                    </select>
                                </div>
                            </div>
                        </div>
                    </td>
                `;

                logTableBody.appendChild(row);
            });
        }
         function goToPage(id) {
            const url = `/Home/ByName/${id}`;
            window.location.href = url;
        }

        function filterTimesByTimeIn(logId) {
            const timeInSelect = document.getElementById(`online-time-${logId}`);
            const selectedTimeInValue = timeInSelect.value;

            const offlineTimeSelect = document.getElementById(`break-offline-time-${logId}`);
            const startTimeSelect = document.getElementById(`start-time-${logId}`);
            const endTimeSelect = document.getElementById(`end-time-${logId}`);

            [offlineTimeSelect, startTimeSelect, endTimeSelect].forEach(select => {
                const options = select.querySelectorAll("option");
                options.forEach(option => {
                    if (option.textContent === selectedTimeInValue) {
                        option.style.display = "block";
                    } else {
                        option.style.display = "none";
                    }
                });
            });
        }

 


    </script>
</body>

</html>
