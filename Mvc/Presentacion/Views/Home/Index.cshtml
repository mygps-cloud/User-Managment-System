﻿<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IP Checker</title>


    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin-top: 20px;
        }

        .container {
            display: flex;
            justify-content: space-around;
            align-content: flex-start;
            flex-wrap: wrap;
            width: 100%;
            margin: auto;
        }

        .user-box {
            padding: 10px;
            border: 2px solid #ddd;
            background-color: #f5f5f5;
            margin-top: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .user-name {
            font-size: 20px;
            color: #333;
            margin-bottom: 10px;
        }

        .ip-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 10px;
            width: 100%;
            margin-bottom: 10px;
        }

        .item {
            padding: 10px;
            border: 1px solid #ddd;
            background-color: #f9f9f9;
            text-align: left;
        }

        .label {
            margin: 5px 0;
        }

        .highlight {
            color: green;
        }

        button {
            padding: 5px 10px;
            background-color: #007bff;
            color: white;
            border: none;
            cursor: pointer;
            margin-top: 10px;
        }

        button:hover {
            background-color: #0056b3;
        }

        select {
            margin-top: 10px;
            width: 100%;
        }

        .status-online {
            color: green;
        }

        .status-offline {
            color: red;
        }
    </style>


</head>

<body>
    <div class="container">
        @foreach (var user in Model)
        {
            <div class="user-box">
                <div class="user-name">@user.Name</div>
                <select id="deviceSelect_@user.Id" onchange="highlightIp('@user.Id')">
                    <option value="">Select a Device</option>
                    @{
                        var selectedDeviceNames = new HashSet<string>();
                    }
                    @foreach (var ip in user.IpStatuses)
                    {
                        var devices = user.Devices as List<Ipstatuschecker.Dto.DeviceDto>;
                        if (devices != null && devices.Any())
                        {
                           foreach (var device in devices)
                                {
                                    if (!string.IsNullOrEmpty(device?.DeviceNames) && selectedDeviceNames.Add(device.DeviceNames))
                                    {
                                        <option value="@device.DeviceNames">@device.DeviceNames</option>
                                    }
                                }

                        }
                    }
                </select>

                <div class="ip-list">
                    @foreach (var ip in user.IpStatuses)
                    {
                        <div class="item" id="ipItem_@ip.IpAddress">
                            <p class="label"><strong>IP Address:</strong> <span class="ip-address">@ip.IpAddress</span></p>
                            <p class="label">Status:
                                <span class="status-@ip.Status.ToLower()">@ip.Status</span>
                            </p>
                           <button onclick="deleteUser('@user.Id')" style="background-color: rgb(250, 4, 238); color: white;">Delete</button>

                        </div>
                        <button onclick="pingSelectedDevice('@ip.IpAddress')">PingDevice</button>

                    }
                </div>
            </div>
        }
    </div>

    <script>
        function highlightIp(userId) {
            const selectedDevice = document.getElementById(`deviceSelect_${userId}`).value;
            const ipItems = document.querySelectorAll(`.item`);

            ipItems.forEach(item => {
                item.querySelector('.ip-address').classList.remove('highlight');
            });

            if (selectedDevice) {
                const deviceIp = getDeviceIp(userId, selectedDevice);
                if (deviceIp) {
                    const ipElement = document.getElementById(`ipItem_${deviceIp}`);
                    if (ipElement) {
                        ipElement.querySelector('.ip-address').classList.add('highlight');
                    }
                }
            }
        }

        function getDeviceIp(userId, deviceName) {
            const userDevices = @Html.Raw(Json.Serialize(Model));
            const user = userDevices.find(u => u.Id === userId);
            if (user) {
                const device = user.Devices.find(d => d.DeviceNames === deviceName);
                if (device) {
                    return device.IpAddress;
                }
            }
            return null;
        }

        const pingSelectedDevice = async (ipAddress) => {
            if (!ipAddress) {
                alert('Invalid IP address. Please select a valid device.');
                return;
            }

            console.error('ipAddress:', ipAddress);
            try {
                let response = await fetch(`Home/SelectDevicePingInfo/${ipAddress}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                let data = await response.json();
                alert(`Device status: ${data.status}`);
            } catch (err) {
                console.error('Error:', err);
                alert('An error occurred while pinging the IP address.');
            }
        }






        const deleteUser = async (userId) => {
            if (!userId) {
                alert('Invalid user ID. Please select a valid user.');
                return;
            }

            try {
              
                let response = await fetch(`Home/Delete/${userId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                let data = await response.json();
                alert(data.message);
              
                location.reload();
            } catch (err) {
                console.error('Error:', err);
                alert('An error occurred while deleting the user.');
            }
        }

    </script>
</body>

</html>
